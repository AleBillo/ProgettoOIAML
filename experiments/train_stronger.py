00000000: 696d 706f 7274 206f 730d 0a69 6d70 6f72  import os..impor
00000010: 7420 6376 320d 0a69 6d70 6f72 7420 6e75  t cv2..import nu
00000020: 6d70 7920 6173 206e 700d 0a66 726f 6d20  mpy as np..from 
00000030: 5049 4c20 696d 706f 7274 2049 6d61 6765  PIL import Image
00000040: 0d0a 0d0a 696d 706f 7274 2074 6f72 6368  ....import torch
00000050: 0d0a 696d 706f 7274 2074 6f72 6368 2e6e  ..import torch.n
00000060: 6e20 6173 206e 6e0d 0a69 6d70 6f72 7420  n as nn..import 
00000070: 746f 7263 682e 6e6e 2e66 756e 6374 696f  torch.nn.functio
00000080: 6e61 6c20 6173 2046 0d0a 696d 706f 7274  nal as F..import
00000090: 2074 6f72 6368 2e6f 7074 696d 2061 7320   torch.optim as 
000000a0: 6f70 7469 6d0d 0a66 726f 6d20 746f 7263  optim..from torc
000000b0: 682e 7574 696c 732e 6461 7461 2069 6d70  h.utils.data imp
000000c0: 6f72 7420 4461 7461 7365 742c 2044 6174  ort Dataset, Dat
000000d0: 614c 6f61 6465 720d 0a69 6d70 6f72 7420  aLoader..import 
000000e0: 746f 7263 6876 6973 696f 6e2e 7472 616e  torchvision.tran
000000f0: 7366 6f72 6d73 2061 7320 540d 0a66 726f  sforms as T..fro
00000100: 6d20 636f 6c6c 6563 7469 6f6e 7320 696d  m collections im
00000110: 706f 7274 2043 6f75 6e74 6572 0d0a 0d0a  port Counter....
00000120: 2320 4175 676d 656e 7461 7469 6f6e 2061  # Augmentation a
00000130: 6e64 2054 7261 6e73 666f 726d 730d 0a63  nd Transforms..c
00000140: 6c61 7373 2041 7567 6d65 6e74 6174 696f  lass Augmentatio
00000150: 6e73 3a0d 0a20 2020 2040 7374 6174 6963  ns:..    @static
00000160: 6d65 7468 6f64 0d0a 2020 2020 6465 6620  method..    def 
00000170: 6765 745f 7472 6169 6e5f 7472 616e 7366  get_train_transf
00000180: 6f72 6d73 2829 3a0d 0a20 2020 2020 2020  orms():..       
00000190: 2072 6574 7572 6e20 542e 436f 6d70 6f73   return T.Compos
000001a0: 6528 5b0d 0a20 2020 2020 2020 2020 2020  e([..           
000001b0: 2054 2e52 616e 646f 6d48 6f72 697a 6f6e   T.RandomHorizon
000001c0: 7461 6c46 6c69 7028 292c 0d0a 2020 2020  talFlip(),..    
000001d0: 2020 2020 2020 2020 542e 5261 6e64 6f6d          T.Random
000001e0: 526f 7461 7469 6f6e 2831 3529 2c0d 0a20  Rotation(15),.. 
000001f0: 2020 2020 2020 2020 2020 2054 2e52 616e             T.Ran
00000200: 646f 6d41 6666 696e 6528 6465 6772 6565  domAffine(degree
00000210: 733d 3135 2c20 7472 616e 736c 6174 653d  s=15, translate=
00000220: 2830 2e31 2c20 302e 3129 2c20 7363 616c  (0.1, 0.1), scal
00000230: 653d 2830 2e39 2c20 312e 3129 292c 0d0a  e=(0.9, 1.1)),..
00000240: 2020 2020 2020 2020 2020 2020 542e 436f              T.Co
00000250: 6c6f 724a 6974 7465 7228 636f 6e74 7261  lorJitter(contra
00000260: 7374 3d30 2e32 2c20 6272 6967 6874 6e65  st=0.2, brightne
00000270: 7373 3d30 2e32 292c 0d0a 2020 2020 2020  ss=0.2),..      
00000280: 2020 2020 2020 542e 546f 5465 6e73 6f72        T.ToTensor
00000290: 2829 2c0d 0a20 2020 2020 2020 2020 2020  (),..           
000002a0: 2054 2e4e 6f72 6d61 6c69 7a65 286d 6561   T.Normalize(mea
000002b0: 6e3d 5b30 2e35 5d2c 2073 7464 3d5b 302e  n=[0.5], std=[0.
000002c0: 355d 292c 0d0a 2020 2020 2020 2020 2020  5]),..          
000002d0: 2020 542e 5261 6e64 6f6d 4572 6173 696e    T.RandomErasin
000002e0: 6728 703d 302e 332c 2073 6361 6c65 3d28  g(p=0.3, scale=(
000002f0: 302e 3032 2c20 302e 3229 2c20 7261 7469  0.02, 0.2), rati
00000300: 6f3d 2830 2e33 2c20 332e 3329 290d 0a20  o=(0.3, 3.3)).. 
00000310: 2020 2020 2020 205d 290d 0a0d 0a20 2020         ])....   
00000320: 2040 7374 6174 6963 6d65 7468 6f64 0d0a   @staticmethod..
00000330: 2020 2020 6465 6620 6765 745f 7465 7374      def get_test
00000340: 5f74 7261 6e73 666f 726d 7328 293a 0d0a  _transforms():..
00000350: 2020 2020 2020 2020 7265 7475 726e 2054          return T
00000360: 2e43 6f6d 706f 7365 285b 0d0a 2020 2020  .Compose([..    
00000370: 2020 2020 2020 2020 542e 546f 5465 6e73          T.ToTens
00000380: 6f72 2829 2c0d 0a20 2020 2020 2020 2020  or(),..         
00000390: 2020 2054 2e4e 6f72 6d61 6c69 7a65 286d     T.Normalize(m
000003a0: 6561 6e3d 5b30 2e35 5d2c 2073 7464 3d5b  ean=[0.5], std=[
000003b0: 302e 355d 292c 0d0a 2020 2020 2020 2020  0.5]),..        
000003c0: 5d29 0d0a 0d0a 2320 5072 6570 726f 6365  ])....# Preproce
000003d0: 7373 696e 670d 0a64 6566 2070 7265 7072  ssing..def prepr
000003e0: 6f63 6573 7328 696d 672c 2074 6172 6765  ocess(img, targe
000003f0: 745f 7369 7a65 3d28 3530 2c20 3530 2929  t_size=(50, 50))
00000400: 3a0d 0a20 2020 2069 6620 696d 6720 6973  :..    if img is
00000410: 204e 6f6e 653a 0d0a 2020 2020 2020 2020   None:..        
00000420: 7265 7475 726e 204e 6f6e 650d 0a20 2020  return None..   
00000430: 2067 7261 7920 3d20 6376 322e 6376 7443   gray = cv2.cvtC
00000440: 6f6c 6f72 2869 6d67 2c20 6376 322e 434f  olor(img, cv2.CO
00000450: 4c4f 525f 4247 5232 4752 4159 290d 0a20  LOR_BGR2GRAY).. 
00000460: 2020 2067 7261 7920 3d20 6376 322e 7265     gray = cv2.re
00000470: 7369 7a65 2867 7261 792c 2074 6172 6765  size(gray, targe
00000480: 745f 7369 7a65 290d 0a20 2020 2067 7261  t_size)..    gra
00000490: 7920 3d20 6e70 2e65 7870 616e 645f 6469  y = np.expand_di
000004a0: 6d73 2867 7261 792c 2061 7869 733d 3029  ms(gray, axis=0)
000004b0: 0d0a 2020 2020 7265 7475 726e 2067 7261  ..    return gra
000004c0: 790d 0a0d 0a23 2044 6174 6173 6574 0d0a  y....# Dataset..
000004d0: 636c 6173 7320 5250 5344 6174 6173 6574  class RPSDataset
000004e0: 2844 6174 6173 6574 293a 0d0a 2020 2020  (Dataset):..    
000004f0: 6465 6620 5f5f 696e 6974 5f5f 2873 656c  def __init__(sel
00000500: 662c 2072 6f6f 745f 6469 722c 2074 7261  f, root_dir, tra
00000510: 6e73 666f 726d 3d4e 6f6e 6529 3a0d 0a20  nsform=None):.. 
00000520: 2020 2020 2020 2073 656c 662e 7361 6d70         self.samp
00000530: 6c65 7320 3d20 5b5d 0d0a 2020 2020 2020  les = []..      
00000540: 2020 7365 6c66 2e63 6c61 7373 5f6d 6170    self.class_map
00000550: 203d 207b 2772 6f63 6b27 3a20 302c 2027   = {'rock': 0, '
00000560: 7061 7065 7227 3a20 312c 2027 7363 6973  paper': 1, 'scis
00000570: 736f 7273 273a 2032 7d0d 0a20 2020 2020  sors': 2}..     
00000580: 2020 2073 656c 662e 7472 616e 7366 6f72     self.transfor
00000590: 6d20 3d20 7472 616e 7366 6f72 6d0d 0a20  m = transform.. 
000005a0: 2020 2020 2020 2073 6b69 7070 6564 203d         skipped =
000005b0: 2030 0d0a 0d0a 2020 2020 2020 2020 666f   0....        fo
000005c0: 7220 6c61 6265 6c20 696e 2073 656c 662e  r label in self.
000005d0: 636c 6173 735f 6d61 702e 6b65 7973 2829  class_map.keys()
000005e0: 3a0d 0a20 2020 2020 2020 2020 2020 2063  :..            c
000005f0: 6c61 7373 5f66 6f6c 6465 7220 3d20 6f73  lass_folder = os
00000600: 2e70 6174 682e 6a6f 696e 2872 6f6f 745f  .path.join(root_
00000610: 6469 722c 206c 6162 656c 290d 0a20 2020  dir, label)..   
00000620: 2020 2020 2020 2020 2069 6620 6e6f 7420           if not 
00000630: 6f73 2e70 6174 682e 6578 6973 7473 2863  os.path.exists(c
00000640: 6c61 7373 5f66 6f6c 6465 7229 3a0d 0a20  lass_folder):.. 
00000650: 2020 2020 2020 2020 2020 2020 2020 2063                 c
00000660: 6f6e 7469 6e75 650d 0a20 2020 2020 2020  ontinue..       
00000670: 2020 2020 2066 6f72 2066 696c 656e 616d       for filenam
00000680: 6520 696e 206f 732e 6c69 7374 6469 7228  e in os.listdir(
00000690: 636c 6173 735f 666f 6c64 6572 293a 0d0a  class_folder):..
000006a0: 2020 2020 2020 2020 2020 2020 2020 2020                  
000006b0: 6966 2066 696c 656e 616d 652e 6c6f 7765  if filename.lowe
000006c0: 7228 292e 656e 6473 7769 7468 2828 222e  r().endswith((".
000006d0: 6a70 6722 2c20 222e 706e 6722 2929 3a0d  jpg", ".png")):.
000006e0: 0a20 2020 2020 2020 2020 2020 2020 2020  .               
000006f0: 2020 2020 2070 6174 6820 3d20 6f73 2e70       path = os.p
00000700: 6174 682e 6a6f 696e 2863 6c61 7373 5f66  ath.join(class_f
00000710: 6f6c 6465 722c 2066 696c 656e 616d 6529  older, filename)
00000720: 0d0a 2020 2020 2020 2020 2020 2020 2020  ..              
00000730: 2020 2020 2020 696d 6720 3d20 6376 322e        img = cv2.
00000740: 696d 7265 6164 2870 6174 6829 0d0a 2020  imread(path)..  
00000750: 2020 2020 2020 2020 2020 2020 2020 2020                  
00000760: 2020 7072 6f63 5f69 6d67 203d 2070 7265    proc_img = pre
00000770: 7072 6f63 6573 7328 696d 6729 0d0a 2020  process(img)..  
00000780: 2020 2020 2020 2020 2020 2020 2020 2020                  
00000790: 2020 6966 2070 726f 635f 696d 6720 6973    if proc_img is
000007a0: 206e 6f74 204e 6f6e 653a 0d0a 2020 2020   not None:..    
000007b0: 2020 2020 2020 2020 2020 2020 2020 2020                  
000007c0: 2020 2020 7365 6c66 2e73 616d 706c 6573      self.samples
000007d0: 2e61 7070 656e 6428 2870 6174 682c 2073  .append((path, s
000007e0: 656c 662e 636c 6173 735f 6d61 705b 6c61  elf.class_map[la
000007f0: 6265 6c5d 2929 0d0a 2020 2020 2020 2020  bel]))..        
00000800: 2020 2020 2020 2020 2020 2020 656c 7365              else
00000810: 3a0d 0a20 2020 2020 2020 2020 2020 2020  :..             
00000820: 2020 2020 2020 2020 2020 2073 6b69 7070             skipp
00000830: 6564 202b 3d20 310d 0a20 2020 2020 2020  ed += 1..       
00000840: 2069 6620 736b 6970 7065 6420 3e20 303a   if skipped > 0:
00000850: 0d0a 2020 2020 2020 2020 2020 2020 7072  ..            pr
00000860: 696e 7428 6622 536b 6970 7065 6420 7b73  int(f"Skipped {s
00000870: 6b69 7070 6564 7d20 696d 6167 6573 2064  kipped} images d
00000880: 7565 2074 6f20 6661 696c 6564 2070 7265  ue to failed pre
00000890: 7072 6f63 6573 7369 6e67 2e22 290d 0a0d  processing.")...
000008a0: 0a20 2020 2064 6566 205f 5f6c 656e 5f5f  .    def __len__
000008b0: 2873 656c 6629 3a0d 0a20 2020 2020 2020  (self):..       
000008c0: 2072 6574 7572 6e20 6c65 6e28 7365 6c66   return len(self
000008d0: 2e73 616d 706c 6573 290d 0a0d 0a20 2020  .samples)....   
000008e0: 2064 6566 205f 5f67 6574 6974 656d 5f5f   def __getitem__
000008f0: 2873 656c 662c 2069 6478 293a 0d0a 2020  (self, idx):..  
00000900: 2020 2020 2020 696d 675f 7061 7468 2c20        img_path, 
00000910: 6c61 6265 6c20 3d20 7365 6c66 2e73 616d  label = self.sam
00000920: 706c 6573 5b69 6478 5d0d 0a20 2020 2020  ples[idx]..     
00000930: 2020 2069 6d67 203d 2063 7632 2e69 6d72     img = cv2.imr
00000940: 6561 6428 696d 675f 7061 7468 290d 0a20  ead(img_path).. 
00000950: 2020 2020 2020 2070 726f 635f 696d 6720         proc_img 
00000960: 3d20 7072 6570 726f 6365 7373 2869 6d67  = preprocess(img
00000970: 290d 0a20 2020 2020 2020 2069 6620 7072  )..        if pr
00000980: 6f63 5f69 6d67 2069 7320 4e6f 6e65 3a0d  oc_img is None:.
00000990: 0a20 2020 2020 2020 2020 2020 2070 726f  .            pro
000009a0: 635f 696d 6720 3d20 6e70 2e7a 6572 6f73  c_img = np.zeros
000009b0: 2828 312c 2035 302c 2035 3029 2c20 6474  ((1, 50, 50), dt
000009c0: 7970 653d 6e70 2e75 696e 7438 290d 0a20  ype=np.uint8).. 
000009d0: 2020 2020 2020 2069 6d67 5f70 696c 203d         img_pil =
000009e0: 2049 6d61 6765 2e66 726f 6d61 7272 6179   Image.fromarray
000009f0: 2870 726f 635f 696d 675b 305d 290d 0a20  (proc_img[0]).. 
00000a00: 2020 2020 2020 2069 6620 7365 6c66 2e74         if self.t
00000a10: 7261 6e73 666f 726d 3a0d 0a20 2020 2020  ransform:..     
00000a20: 2020 2020 2020 2069 6d67 5f74 656e 736f         img_tenso
00000a30: 7220 3d20 7365 6c66 2e74 7261 6e73 666f  r = self.transfo
00000a40: 726d 2869 6d67 5f70 696c 290d 0a20 2020  rm(img_pil)..   
00000a50: 2020 2020 2065 6c73 653a 0d0a 2020 2020       else:..    
00000a60: 2020 2020 2020 2020 696d 675f 7465 6e73          img_tens
00000a70: 6f72 203d 2074 6f72 6368 2e74 656e 736f  or = torch.tenso
00000a80: 7228 7072 6f63 5f69 6d67 2c20 6474 7970  r(proc_img, dtyp
00000a90: 653d 746f 7263 682e 666c 6f61 7433 3229  e=torch.float32)
00000aa0: 202f 2032 3535 2e30 0d0a 2020 2020 2020   / 255.0..      
00000ab0: 2020 7265 7475 726e 2069 6d67 5f74 656e    return img_ten
00000ac0: 736f 722c 206c 6162 656c 0d0a 0d0a 2320  sor, label....# 
00000ad0: 5570 6772 6164 6564 204d 6f64 656c 0d0a  Upgraded Model..
00000ae0: 636c 6173 7320 434e 4e28 6e6e 2e4d 6f64  class CNN(nn.Mod
00000af0: 756c 6529 3a0d 0a20 2020 2064 6566 205f  ule):..    def _
00000b00: 5f69 6e69 745f 5f28 7365 6c66 2c20 696e  _init__(self, in
00000b10: 7075 745f 7369 7a65 3d35 302c 206e 756d  put_size=50, num
00000b20: 5f63 6c61 7373 6573 3d33 293a 0d0a 2020  _classes=3):..  
00000b30: 2020 2020 2020 7375 7065 7228 292e 5f5f        super().__
00000b40: 696e 6974 5f5f 2829 0d0a 2020 2020 2020  init__()..      
00000b50: 2020 7365 6c66 2e66 6561 7475 7265 7320    self.features 
00000b60: 3d20 6e6e 2e53 6571 7565 6e74 6961 6c28  = nn.Sequential(
00000b70: 0d0a 2020 2020 2020 2020 2020 2020 6e6e  ..            nn
00000b80: 2e43 6f6e 7632 6428 312c 2033 322c 206b  .Conv2d(1, 32, k
00000b90: 6572 6e65 6c5f 7369 7a65 3d33 2c20 7061  ernel_size=3, pa
00000ba0: 6464 696e 673d 3129 2c0d 0a20 2020 2020  dding=1),..     
00000bb0: 2020 2020 2020 206e 6e2e 4261 7463 684e         nn.BatchN
00000bc0: 6f72 6d32 6428 3332 292c 0d0a 2020 2020  orm2d(32),..    
00000bd0: 2020 2020 2020 2020 6e6e 2e52 654c 5528          nn.ReLU(
00000be0: 292c 0d0a 2020 2020 2020 2020 2020 2020  ),..            
00000bf0: 6e6e 2e43 6f6e 7632 6428 3332 2c20 3332  nn.Conv2d(32, 32
00000c00: 2c20 6b65 726e 656c 5f73 697a 653d 332c  , kernel_size=3,
00000c10: 2070 6164 6469 6e67 3d31 292c 0d0a 2020   padding=1),..  
00000c20: 2020 2020 2020 2020 2020 6e6e 2e42 6174            nn.Bat
00000c30: 6368 4e6f 726d 3264 2833 3229 2c0d 0a20  chNorm2d(32),.. 
00000c40: 2020 2020 2020 2020 2020 206e 6e2e 5265             nn.Re
00000c50: 4c55 2829 2c0d 0a20 2020 2020 2020 2020  LU(),..         
00000c60: 2020 206e 6e2e 4d61 7850 6f6f 6c32 6428     nn.MaxPool2d(
00000c70: 3229 2c20 2023 202d 3e20 3235 7832 350d  2),  # -> 25x25.
00000c80: 0a0d 0a20 2020 2020 2020 2020 2020 206e  ...            n
00000c90: 6e2e 436f 6e76 3264 2833 322c 2036 342c  n.Conv2d(32, 64,
00000ca0: 206b 6572 6e65 6c5f 7369 7a65 3d33 2c20   kernel_size=3, 
00000cb0: 7061 6464 696e 673d 3129 2c0d 0a20 2020  padding=1),..   
00000cc0: 2020 2020 2020 2020 206e 6e2e 4261 7463           nn.Batc
00000cd0: 684e 6f72 6d32 6428 3634 292c 0d0a 2020  hNorm2d(64),..  
00000ce0: 2020 2020 2020 2020 2020 6e6e 2e52 654c            nn.ReL
00000cf0: 5528 292c 0d0a 2020 2020 2020 2020 2020  U(),..          
00000d00: 2020 6e6e 2e43 6f6e 7632 6428 3634 2c20    nn.Conv2d(64, 
00000d10: 3634 2c20 6b65 726e 656c 5f73 697a 653d  64, kernel_size=
00000d20: 332c 2070 6164 6469 6e67 3d31 292c 0d0a  3, padding=1),..
00000d30: 2020 2020 2020 2020 2020 2020 6e6e 2e42              nn.B
00000d40: 6174 6368 4e6f 726d 3264 2836 3429 2c0d  atchNorm2d(64),.
00000d50: 0a20 2020 2020 2020 2020 2020 206e 6e2e  .            nn.
00000d60: 5265 4c55 2829 2c0d 0a20 2020 2020 2020  ReLU(),..       
00000d70: 2020 2020 206e 6e2e 4d61 7850 6f6f 6c32       nn.MaxPool2
00000d80: 6428 3229 2c20 2023 202d 3e20 3132 7831  d(2),  # -> 12x1
00000d90: 320d 0a0d 0a20 2020 2020 2020 2020 2020  2....           
00000da0: 206e 6e2e 436f 6e76 3264 2836 342c 2031   nn.Conv2d(64, 1
00000db0: 3238 2c20 6b65 726e 656c 5f73 697a 653d  28, kernel_size=
00000dc0: 332c 2070 6164 6469 6e67 3d31 292c 0d0a  3, padding=1),..
00000dd0: 2020 2020 2020 2020 2020 2020 6e6e 2e42              nn.B
00000de0: 6174 6368 4e6f 726d 3264 2831 3238 292c  atchNorm2d(128),
00000df0: 0d0a 2020 2020 2020 2020 2020 2020 6e6e  ..            nn
00000e00: 2e52 654c 5528 292c 0d0a 2020 2020 2020  .ReLU(),..      
00000e10: 2020 2020 2020 6e6e 2e4d 6178 506f 6f6c        nn.MaxPool
00000e20: 3264 2832 292c 2020 2320 2d3e 2036 7836  2d(2),  # -> 6x6
00000e30: 0d0a 2020 2020 2020 2020 290d 0a0d 0a20  ..        ).... 
00000e40: 2020 2020 2020 2073 656c 662e 636c 6173         self.clas
00000e50: 7369 6669 6572 203d 206e 6e2e 5365 7175  sifier = nn.Sequ
00000e60: 656e 7469 616c 280d 0a20 2020 2020 2020  ential(..       
00000e70: 2020 2020 206e 6e2e 466c 6174 7465 6e28       nn.Flatten(
00000e80: 292c 0d0a 2020 2020 2020 2020 2020 2020  ),..            
00000e90: 6e6e 2e4c 696e 6561 7228 3132 3820 2a20  nn.Linear(128 * 
00000ea0: 3620 2a20 362c 2031 3238 292c 0d0a 2020  6 * 6, 128),..  
00000eb0: 2020 2020 2020 2020 2020 6e6e 2e52 654c            nn.ReL
00000ec0: 5528 292c 0d0a 2020 2020 2020 2020 2020  U(),..          
00000ed0: 2020 6e6e 2e44 726f 706f 7574 2830 2e33    nn.Dropout(0.3
00000ee0: 292c 0d0a 2020 2020 2020 2020 2020 2020  ),..            
00000ef0: 6e6e 2e4c 696e 6561 7228 3132 382c 206e  nn.Linear(128, n
00000f00: 756d 5f63 6c61 7373 6573 290d 0a20 2020  um_classes)..   
00000f10: 2020 2020 2029 0d0a 0d0a 2020 2020 6465       )....    de
00000f20: 6620 666f 7277 6172 6428 7365 6c66 2c20  f forward(self, 
00000f30: 7829 3a0d 0a20 2020 2020 2020 2078 203d  x):..        x =
00000f40: 2073 656c 662e 6665 6174 7572 6573 2878   self.features(x
00000f50: 290d 0a20 2020 2020 2020 2078 203d 2073  )..        x = s
00000f60: 656c 662e 636c 6173 7369 6669 6572 2878  elf.classifier(x
00000f70: 290d 0a20 2020 2020 2020 2072 6574 7572  )..        retur
00000f80: 6e20 780d 0a0d 0a23 2054 7261 696e 696e  n x....# Trainin
00000f90: 6720 4c6f 6769 630d 0a63 6c61 7373 2054  g Logic..class T
00000fa0: 7261 696e 6572 3a0d 0a20 2020 2064 6566  rainer:..    def
00000fb0: 205f 5f69 6e69 745f 5f28 7365 6c66 2c20   __init__(self, 
00000fc0: 6d6f 6465 6c2c 2074 7261 696e 5f6c 6f61  model, train_loa
00000fd0: 6465 722c 2074 6573 745f 6c6f 6164 6572  der, test_loader
00000fe0: 3d4e 6f6e 652c 2064 6576 6963 653d 4e6f  =None, device=No
00000ff0: 6e65 2c20 6c72 3d30 2e30 3031 293a 0d0a  ne, lr=0.001):..
00001000: 2020 2020 2020 2020 7365 6c66 2e6d 6f64          self.mod
00001010: 656c 203d 206d 6f64 656c 0d0a 2020 2020  el = model..    
00001020: 2020 2020 7365 6c66 2e74 7261 696e 5f6c      self.train_l
00001030: 6f61 6465 7220 3d20 7472 6169 6e5f 6c6f  oader = train_lo
00001040: 6164 6572 0d0a 2020 2020 2020 2020 7365  ader..        se
00001050: 6c66 2e74 6573 745f 6c6f 6164 6572 203d  lf.test_loader =
00001060: 2074 6573 745f 6c6f 6164 6572 0d0a 2020   test_loader..  
00001070: 2020 2020 2020 7365 6c66 2e64 6576 6963        self.devic
00001080: 6520 3d20 6465 7669 6365 206f 7220 746f  e = device or to
00001090: 7263 682e 6465 7669 6365 280d 0a20 2020  rch.device(..   
000010a0: 2020 2020 2020 2020 2022 6375 6461 2220           "cuda" 
000010b0: 6966 2074 6f72 6368 2e63 7564 612e 6973  if torch.cuda.is
000010c0: 5f61 7661 696c 6162 6c65 2829 2065 6c73  _available() els
000010d0: 6520 2263 7075 220d 0a20 2020 2020 2020  e "cpu"..       
000010e0: 2029 0d0a 0d0a 2020 2020 2020 2020 2320   )....        # 
000010f0: 436f 6d70 7574 6520 636c 6173 7320 7765  Compute class we
00001100: 6967 6874 730d 0a20 2020 2020 2020 2061  ights..        a
00001110: 6c6c 5f6c 6162 656c 7320 3d20 5b6c 6162  ll_labels = [lab
00001120: 656c 2066 6f72 205f 2c20 6c61 6265 6c20  el for _, label 
00001130: 696e 2074 7261 696e 5f6c 6f61 6465 722e  in train_loader.
00001140: 6461 7461 7365 742e 7361 6d70 6c65 735d  dataset.samples]
00001150: 0d0a 2020 2020 2020 2020 636f 756e 7473  ..        counts
00001160: 203d 2043 6f75 6e74 6572 2861 6c6c 5f6c   = Counter(all_l
00001170: 6162 656c 7329 0d0a 2020 2020 2020 2020  abels)..        
00001180: 746f 7461 6c20 3d20 7375 6d28 636f 756e  total = sum(coun
00001190: 7473 2e76 616c 7565 7328 2929 0d0a 2020  ts.values())..  
000011a0: 2020 2020 2020 7765 6967 6874 7320 3d20        weights = 
000011b0: 5b74 6f74 616c 202f 2063 6f75 6e74 735b  [total / counts[
000011c0: 695d 2066 6f72 2069 2069 6e20 7261 6e67  i] for i in rang
000011d0: 6528 3329 5d0d 0a20 2020 2020 2020 2063  e(3)]..        c
000011e0: 6c61 7373 5f77 6569 6768 7473 203d 2074  lass_weights = t
000011f0: 6f72 6368 2e74 656e 736f 7228 7765 6967  orch.tensor(weig
00001200: 6874 732c 2064 7479 7065 3d74 6f72 6368  hts, dtype=torch
00001210: 2e66 6c6f 6174 3332 292e 746f 2873 656c  .float32).to(sel
00001220: 662e 6465 7669 6365 290d 0a0d 0a20 2020  f.device)....   
00001230: 2020 2020 2073 656c 662e 6372 6974 6572       self.criter
00001240: 696f 6e20 3d20 6e6e 2e43 726f 7373 456e  ion = nn.CrossEn
00001250: 7472 6f70 794c 6f73 7328 7765 6967 6874  tropyLoss(weight
00001260: 3d63 6c61 7373 5f77 6569 6768 7473 290d  =class_weights).
00001270: 0a20 2020 2020 2020 2073 656c 662e 6f70  .        self.op
00001280: 7469 6d69 7a65 7220 3d20 6f70 7469 6d2e  timizer = optim.
00001290: 4164 616d 2873 656c 662e 6d6f 6465 6c2e  Adam(self.model.
000012a0: 7061 7261 6d65 7465 7273 2829 2c20 6c72  parameters(), lr
000012b0: 3d6c 7229 0d0a 2020 2020 2020 2020 7365  =lr)..        se
000012c0: 6c66 2e73 6368 6564 756c 6572 203d 206f  lf.scheduler = o
000012d0: 7074 696d 2e6c 725f 7363 6865 6475 6c65  ptim.lr_schedule
000012e0: 722e 436f 7369 6e65 416e 6e65 616c 696e  r.CosineAnnealin
000012f0: 674c 5228 7365 6c66 2e6f 7074 696d 697a  gLR(self.optimiz
00001300: 6572 2c20 545f 6d61 783d 3330 290d 0a20  er, T_max=30).. 
00001310: 2020 2020 2020 2073 656c 662e 6d6f 6465         self.mode
00001320: 6c2e 746f 2873 656c 662e 6465 7669 6365  l.to(self.device
00001330: 290d 0a0d 0a20 2020 2064 6566 2074 7261  )....    def tra
00001340: 696e 2873 656c 662c 206e 756d 5f65 706f  in(self, num_epo
00001350: 6368 733d 3330 293a 0d0a 2020 2020 2020  chs=30):..      
00001360: 2020 666f 7220 6570 6f63 6820 696e 2072    for epoch in r
00001370: 616e 6765 286e 756d 5f65 706f 6368 7329  ange(num_epochs)
00001380: 3a0d 0a20 2020 2020 2020 2020 2020 2073  :..            s
00001390: 656c 662e 6d6f 6465 6c2e 7472 6169 6e28  elf.model.train(
000013a0: 290d 0a20 2020 2020 2020 2020 2020 2074  )..            t
000013b0: 6f74 616c 5f6c 6f73 7320 3d20 300d 0a20  otal_loss = 0.. 
000013c0: 2020 2020 2020 2020 2020 2066 6f72 2069             for i
000013d0: 6d67 732c 206c 6162 656c 7320 696e 2073  mgs, labels in s
000013e0: 656c 662e 7472 6169 6e5f 6c6f 6164 6572  elf.train_loader
000013f0: 3a0d 0a20 2020 2020 2020 2020 2020 2020  :..             
00001400: 2020 2069 6d67 732c 206c 6162 656c 7320     imgs, labels 
00001410: 3d20 696d 6773 2e74 6f28 7365 6c66 2e64  = imgs.to(self.d
00001420: 6576 6963 6529 2c20 6c61 6265 6c73 2e74  evice), labels.t
00001430: 6f28 7365 6c66 2e64 6576 6963 6529 0d0a  o(self.device)..
00001440: 2020 2020 2020 2020 2020 2020 2020 2020                  
00001450: 7365 6c66 2e6f 7074 696d 697a 6572 2e7a  self.optimizer.z
00001460: 6572 6f5f 6772 6164 2829 0d0a 2020 2020  ero_grad()..    
00001470: 2020 2020 2020 2020 2020 2020 6f75 7470              outp
00001480: 7574 7320 3d20 7365 6c66 2e6d 6f64 656c  uts = self.model
00001490: 2869 6d67 7329 0d0a 2020 2020 2020 2020  (imgs)..        
000014a0: 2020 2020 2020 2020 6c6f 7373 203d 2073          loss = s
000014b0: 656c 662e 6372 6974 6572 696f 6e28 6f75  elf.criterion(ou
000014c0: 7470 7574 732c 206c 6162 656c 7329 0d0a  tputs, labels)..
000014d0: 2020 2020 2020 2020 2020 2020 2020 2020                  
000014e0: 6c6f 7373 2e62 6163 6b77 6172 6428 290d  loss.backward().
000014f0: 0a20 2020 2020 2020 2020 2020 2020 2020  .               
00001500: 2073 656c 662e 6f70 7469 6d69 7a65 722e   self.optimizer.
00001510: 7374 6570 2829 0d0a 2020 2020 2020 2020  step()..        
00001520: 2020 2020 2020 2020 746f 7461 6c5f 6c6f          total_lo
00001530: 7373 202b 3d20 6c6f 7373 2e69 7465 6d28  ss += loss.item(
00001540: 290d 0a20 2020 2020 2020 2020 2020 2061  )..            a
00001550: 7667 5f6c 6f73 7320 3d20 746f 7461 6c5f  vg_loss = total_
00001560: 6c6f 7373 202f 206c 656e 2873 656c 662e  loss / len(self.
00001570: 7472 6169 6e5f 6c6f 6164 6572 290d 0a20  train_loader).. 
00001580: 2020 2020 2020 2020 2020 2070 7269 6e74             print
00001590: 2866 2245 706f 6368 207b 6570 6f63 682b  (f"Epoch {epoch+
000015a0: 317d 2f7b 6e75 6d5f 6570 6f63 6873 7d2c  1}/{num_epochs},
000015b0: 204c 6f73 733a 207b 6176 675f 6c6f 7373   Loss: {avg_loss
000015c0: 3a2e 3466 7d22 290d 0a20 2020 2020 2020  :.4f}")..       
000015d0: 2020 2020 2069 6620 7365 6c66 2e74 6573       if self.tes
000015e0: 745f 6c6f 6164 6572 3a0d 0a20 2020 2020  t_loader:..     
000015f0: 2020 2020 2020 2020 2020 2073 656c 662e             self.
00001600: 6576 616c 7561 7465 2829 0d0a 2020 2020  evaluate()..    
00001610: 2020 2020 2020 2020 7365 6c66 2e73 6368          self.sch
00001620: 6564 756c 6572 2e73 7465 7028 290d 0a0d  eduler.step()...
00001630: 0a20 2020 2064 6566 2065 7661 6c75 6174  .    def evaluat
00001640: 6528 7365 6c66 293a 0d0a 2020 2020 2020  e(self):..      
00001650: 2020 7365 6c66 2e6d 6f64 656c 2e65 7661    self.model.eva
00001660: 6c28 290d 0a20 2020 2020 2020 2063 6f72  l()..        cor
00001670: 7265 6374 203d 2030 0d0a 2020 2020 2020  rect = 0..      
00001680: 2020 746f 7461 6c20 3d20 300d 0a20 2020    total = 0..   
00001690: 2020 2020 2077 6974 6820 746f 7263 682e       with torch.
000016a0: 6e6f 5f67 7261 6428 293a 0d0a 2020 2020  no_grad():..    
000016b0: 2020 2020 2020 2020 666f 7220 696d 6773          for imgs
000016c0: 2c20 6c61 6265 6c73 2069 6e20 7365 6c66  , labels in self
000016d0: 2e74 6573 745f 6c6f 6164 6572 3a0d 0a20  .test_loader:.. 
000016e0: 2020 2020 2020 2020 2020 2020 2020 2069                 i
000016f0: 6d67 732c 206c 6162 656c 7320 3d20 696d  mgs, labels = im
00001700: 6773 2e74 6f28 7365 6c66 2e64 6576 6963  gs.to(self.devic
00001710: 6529 2c20 6c61 6265 6c73 2e74 6f28 7365  e), labels.to(se
00001720: 6c66 2e64 6576 6963 6529 0d0a 2020 2020  lf.device)..    
00001730: 2020 2020 2020 2020 2020 2020 6f75 7470              outp
00001740: 7574 7320 3d20 7365 6c66 2e6d 6f64 656c  uts = self.model
00001750: 2869 6d67 7329 0d0a 2020 2020 2020 2020  (imgs)..        
00001760: 2020 2020 2020 2020 5f2c 2070 7265 6469          _, predi
00001770: 6374 6564 203d 2074 6f72 6368 2e6d 6178  cted = torch.max
00001780: 286f 7574 7075 7473 2c20 3129 0d0a 2020  (outputs, 1)..  
00001790: 2020 2020 2020 2020 2020 2020 2020 746f                to
000017a0: 7461 6c20 2b3d 206c 6162 656c 732e 7369  tal += labels.si
000017b0: 7a65 2830 290d 0a20 2020 2020 2020 2020  ze(0)..         
000017c0: 2020 2020 2020 2063 6f72 7265 6374 202b         correct +
000017d0: 3d20 2870 7265 6469 6374 6564 203d 3d20  = (predicted == 
000017e0: 6c61 6265 6c73 292e 7375 6d28 292e 6974  labels).sum().it
000017f0: 656d 2829 0d0a 2020 2020 2020 2020 6163  em()..        ac
00001800: 6375 7261 6379 203d 2031 3030 202a 2063  curacy = 100 * c
00001810: 6f72 7265 6374 202f 2074 6f74 616c 0d0a  orrect / total..
00001820: 2020 2020 2020 2020 7072 696e 7428 6622          print(f"
00001830: 5465 7374 2041 6363 7572 6163 793a 207b  Test Accuracy: {
00001840: 6163 6375 7261 6379 3a2e 3266 7d25 2229  accuracy:.2f}%")
00001850: 0d0a 0d0a 2020 2020 6465 6620 7361 7665  ....    def save
00001860: 5f6d 6f64 656c 2873 656c 662c 2070 6174  _model(self, pat
00001870: 6829 3a0d 0a20 2020 2020 2020 2074 6f72  h):..        tor
00001880: 6368 2e73 6176 6528 7365 6c66 2e6d 6f64  ch.save(self.mod
00001890: 656c 2e73 7461 7465 5f64 6963 7428 292c  el.state_dict(),
000018a0: 2070 6174 6829 0d0a 2020 2020 2020 2020   path)..        
000018b0: 7072 696e 7428 6622 4d6f 6465 6c20 7361  print(f"Model sa
000018c0: 7665 6420 6174 207b 7061 7468 7d22 290d  ved at {path}").
000018d0: 0a0d 0a23 204d 6169 6e20 456e 7472 790d  ...# Main Entry.
000018e0: 0a64 6566 206d 6169 6e28 293a 0d0a 2020  .def main():..  
000018f0: 2020 7472 6169 6e5f 6469 7220 3d20 2264    train_dir = "d
00001900: 6174 6173 6574 2f6d 6973 746f 2f74 7261  ataset/misto/tra
00001910: 696e 220d 0a20 2020 2074 6573 745f 6469  in"..    test_di
00001920: 7220 3d20 2264 6174 6173 6574 2f6d 6973  r = "dataset/mis
00001930: 746f 2f74 6573 7422 0d0a 0d0a 2020 2020  to/test"....    
00001940: 7472 6169 6e5f 6461 7461 7365 7420 3d20  train_dataset = 
00001950: 5250 5344 6174 6173 6574 280d 0a20 2020  RPSDataset(..   
00001960: 2020 2020 2072 6f6f 745f 6469 723d 7472       root_dir=tr
00001970: 6169 6e5f 6469 722c 0d0a 2020 2020 2020  ain_dir,..      
00001980: 2020 7472 616e 7366 6f72 6d3d 4175 676d    transform=Augm
00001990: 656e 7461 7469 6f6e 732e 6765 745f 7472  entations.get_tr
000019a0: 6169 6e5f 7472 616e 7366 6f72 6d73 2829  ain_transforms()
000019b0: 0d0a 2020 2020 290d 0a20 2020 2074 6573  ..    )..    tes
000019c0: 745f 6461 7461 7365 7420 3d20 5250 5344  t_dataset = RPSD
000019d0: 6174 6173 6574 280d 0a20 2020 2020 2020  ataset(..       
000019e0: 2072 6f6f 745f 6469 723d 7465 7374 5f64   root_dir=test_d
000019f0: 6972 2c0d 0a20 2020 2020 2020 2074 7261  ir,..        tra
00001a00: 6e73 666f 726d 3d41 7567 6d65 6e74 6174  nsform=Augmentat
00001a10: 696f 6e73 2e67 6574 5f74 6573 745f 7472  ions.get_test_tr
00001a20: 616e 7366 6f72 6d73 2829 0d0a 2020 2020  ansforms()..    
00001a30: 290d 0a0d 0a20 2020 2074 7261 696e 5f6c  )....    train_l
00001a40: 6f61 6465 7220 3d20 4461 7461 4c6f 6164  oader = DataLoad
00001a50: 6572 2874 7261 696e 5f64 6174 6173 6574  er(train_dataset
00001a60: 2c20 6261 7463 685f 7369 7a65 3d33 322c  , batch_size=32,
00001a70: 2073 6875 6666 6c65 3d54 7275 6529 0d0a   shuffle=True)..
00001a80: 2020 2020 7465 7374 5f6c 6f61 6465 7220      test_loader 
00001a90: 3d20 4461 7461 4c6f 6164 6572 2874 6573  = DataLoader(tes
00001aa0: 745f 6461 7461 7365 742c 2062 6174 6368  t_dataset, batch
00001ab0: 5f73 697a 653d 3332 2c20 7368 7566 666c  _size=32, shuffl
00001ac0: 653d 4661 6c73 6529 0d0a 0d0a 2020 2020  e=False)....    
00001ad0: 6d6f 6465 6c20 3d20 434e 4e28 696e 7075  model = CNN(inpu
00001ae0: 745f 7369 7a65 3d35 302c 206e 756d 5f63  t_size=50, num_c
00001af0: 6c61 7373 6573 3d33 290d 0a20 2020 2074  lasses=3)..    t
00001b00: 7261 696e 6572 203d 2054 7261 696e 6572  rainer = Trainer
00001b10: 286d 6f64 656c 2c20 7472 6169 6e5f 6c6f  (model, train_lo
00001b20: 6164 6572 2c20 7465 7374 5f6c 6f61 6465  ader, test_loade
00001b30: 7229 0d0a 2020 2020 7472 6169 6e65 722e  r)..    trainer.
00001b40: 7472 6169 6e28 6e75 6d5f 6570 6f63 6873  train(num_epochs
00001b50: 3d33 3029 0d0a 2020 2020 7472 6169 6e65  =30)..    traine
00001b60: 722e 7361 7665 5f6d 6f64 656c 2822 6d6f  r.save_model("mo
00001b70: 6465 6c5f 7374 726f 6e67 6572 2e70 7468  del_stronger.pth
00001b80: 2229 0d0a 0d0a 6966 205f 5f6e 616d 655f  ")....if __name_
00001b90: 5f20 3d3d 2022 5f5f 6d61 696e 5f5f 223a  _ == "__main__":
00001ba0: 0d0a 2020 2020 6d61 696e 2829 0d0a       ..    main()..
